@page "/"
@namespace HnpwaBlazor.Server.Pages
@using HnpwaBlazor.Client
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>HN Blazor</title>
    <base href="~/" />
    <link href="css/app.min.css" rel="stylesheet" />
</head>
<body>
    <component type="typeof(App)" render-mode="WebAssemblyPrerendered" />

    @* <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">ðŸ—™</a>
    </div> *@

    <!-- For the PageTitle component -->
    <script>
        function BlazorSetTitle(title) {
            document.title = title;
        }
        function BlazorElementExists(id) {
            return !!document.getElementById(id);
        }
    </script>

    <script src="_framework/blazor.webassembly.js" autostart="false"></script>
    <!-- Load Brotli compressed files -->
    <script src="js/decode.min.js"></script>
    <script>
        Blazor.start({
          loadBootResource: function (type, name, defaultUri, integrity) {
            if (type !== 'dotnetjs' && location.hostname !== 'localhost') {
              return (async function () {
                const response = await fetch(defaultUri + '.br', { cache: 'no-cache' });
                if (!response.ok) {
                  throw new Error(response.statusText);
                }
                const originalResponseBuffer = await response.arrayBuffer();
                const originalResponseArray = new Int8Array(originalResponseBuffer);
                const decompressedResponseArray = BrotliDecode(originalResponseArray);
                const contentType = type === 
                  'dotnetwasm' ? 'application/wasm' : 'application/octet-stream';
                return new Response(decompressedResponseArray, 
                  { headers: { 'content-type': contentType } });
              })();
            }
          }
        });
    </script>
    <script>navigator.serviceWorker.register('service-worker.js');</script>

    <component type="typeof(HnpwaBlazor.Client.Components.PrerenderCacheStore)" render-mode="Static" />
</body>
</html>
