@page "/"
@namespace HnpwaBlazor.Server.Pages
@using HnpwaBlazor.Client
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Blazor HN</title>
    <meta name="description" content="A simple Hacker News reader built with the Blazor framework" />
    <meta name="keywords" content="HackerNews, Blazor, HNPWA, .NET" />
    <meta name="author" content="Erwin Kuhn" />

    <base href="~/" />

     <link rel="preconnect" href="https://api.hackerwebapp.com/">

    <link href="css/app.min.css" rel="stylesheet" />
    <link href="manifest.json" rel="manifest" />
    <link rel="apple-touch-icon" sizes="180x180" href="apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="favicon-32x32.png">
</head>
<body>
    <component type="typeof(App)" render-mode="WebAssemblyPrerendered" />

    <!-- For the PageTitle component -->
    <script>
        function BlazorSetTitle(title) {
            document.title = title;
        }
    </script>

    <script src="_framework/blazor.webassembly.js" autostart="false"></script>
    <!-- Load Brotli compressed files -->
    <script src="js/decode.min.js"></script>
    <script>
        Blazor.start({
          loadBootResource: function (type, name, defaultUri, integrity) {
            if (type !== 'dotnetjs' && location.hostname !== 'localhost') {
              return (async function () {
                const response = await fetch(defaultUri + '.br', { cache: 'no-cache' });
                if (!response.ok) {
                  throw new Error(response.statusText);
                }
                const originalResponseBuffer = await response.arrayBuffer();
                const originalResponseArray = new Int8Array(originalResponseBuffer);
                const decompressedResponseArray = BrotliDecode(originalResponseArray);
                const contentType = type === 
                  'dotnetwasm' ? 'application/wasm' : 'application/octet-stream';
                return new Response(decompressedResponseArray, 
                  { headers: { 'content-type': contentType } });
              })();
            }
          }
        });
    </script>
    <script>navigator.serviceWorker.register('service-worker.js');</script>

    <component type="typeof(HnpwaBlazor.Server.Components.CacheStore)" render-mode="Static" />
</body>
</html>
